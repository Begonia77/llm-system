<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.iocoder.yudao.module.system.dal.mysql.commodity.CommodityMapper">

    <!--
        一般情况下，尽可能使用 Mapper 进行 CRUD 增删改查即可。
        无法满足的场景，例如说多表关联查询，才使用 XML 编写 SQL。
        代码生成器暂时只生成 Mapper XML 文件本身，更多推荐 MybatisX 快速开发插件来生成查询。
        文档可见：https://www.iocoder.cn/MyBatis/x-plugins/
     -->
    <resultMap id="commodityMap" type="cn.iocoder.yudao.module.system.dal.dataobject.commodity.CommodityDO">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="category_id" property="categoryId" />
        <result column="category_name" property="categoryName" />
        <result column="brand_id" property="brandId" />
        <result column="brand_name" property="brandName" />
        <result column="specification" property="specification" />
        <result column="description" property="description" />
        <result column="image_url" property="imageUrl" />
        <result column="purchase_price" property="purchasePrice" />
        <result column="sale_price" property="salePrice" />
        <result column="remark" property="remark" />
        <result column="status" property="status" />
        <result column="inventory" property="inventory" />
        <result column="create_time" property="createTime" />
    </resultMap>

    <select id="selectCommodityPage" resultMap="commodityMap">
        SELECT 
            c.id,
            c.name,
            c.category_id,
            category.name as category_name,
            c.brand_id,
            brand.name as brand_name,
            c.specification,
            c.description,
            c.image_url,
            c.purchase_price,
            c.sale_price,
            c.remark,
            c.status,
            (COALESCE(purchase.total_purchase, 0) - COALESCE(sell.total_sell, 0)) as inventory,
            c.create_time
        FROM 
            commodity as c
        LEFT JOIN
            category ON c.category_id = category.id
        LEFT JOIN
            brand ON c.brand_id = brand.id
        LEFT JOIN
            (SELECT 
                commodity_id,
                SUM(quantity) AS total_purchase
            FROM 
                purchase_order_item
            WHERE
                purchase_order_item.deleted = 0
            GROUP BY 
                commodity_id) AS purchase
        ON 
            c.id = purchase.commodity_id
        LEFT JOIN
            (SELECT 
                commodity_id,
                SUM(quantity) AS total_sell
            FROM 
                sell_order_item
            WHERE
                sell_order_item.deleted = 0
            GROUP BY 
                commodity_id) AS sell
        ON 
            c.id = sell.commodity_id
        WHERE 
            c.deleted = 0
        <if test="req.name != null">
            AND c.name like concat('%', #{req.name}, '%')
        </if>
        <if test="req.status != null">
            AND c.status = #{req.status}
        </if>
        <if test="req.createTime != null">
            <if test="req.createTime.length == 2 and req.createTime[0] != null and req.createTime[1] != null">
                AND c.create_time BETWEEN #{req.createTime[0]} AND #{req.createTime[1]}
            </if>
            <if test="req.createTime.length == 1 and req.createTime[0] != null">
                AND c.create_time &gt;= #{req.createTime[0]}
            </if>
            <if test="req.createTime.length == 1 and req.createTime[1] != null">
                AND c.create_time &lt;= #{req.createTime[1]}
            </if>
        </if>
    </select>
</mapper>