<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.iocoder.yudao.module.system.dal.mysql.purchaseOrder.PurchaseOrderMapper">

    <!--
        一般情况下，尽可能使用 Mapper 进行 CRUD 增删改查即可。
        无法满足的场景，例如说多表关联查询，才使用 XML 编写 SQL。
        代码生成器暂时只生成 Mapper XML 文件本身，更多推荐 MybatisX 快速开发插件来生成查询。
        文档可见：https://www.iocoder.cn/MyBatis/x-plugins/
     -->
    <resultMap id="purchaseOrderMap" type="cn.iocoder.yudao.module.system.dal.dataobject.purchaseOrder.PurchaseOrderDO">
        <id column="id" property="id" />
        <result column="order_number" property="orderNumber" />
        <result column="warehouse_id" property="warehouseId" />
        <result column="warehouse_name" property="warehouseName" />
        <result column="supplier_id" property="supplierId" />
        <result column="supplier_name" property="supplierName" />
        <result column="staff_id" property="staffId" />
        <result column="user_nickname" property="userNickname" />
        <result column="total_quantity" property="totalQuantity" />
        <result column="total_amount" property="totalAmount" />
        <result column="remark" property="remark" />
        <result column="status" property="status" />
        <result column="create_time" property="createTime" />
    </resultMap>

    <select id="selectPurchaseOrderPage" resultMap="purchaseOrderMap">
        select
            po.id,
            po.order_number,
            po.warehouse_id,
            w.name as warehouse_name,
            po.supplier_id,
            s.name as supplier_name,
            po.staff_id,
            su.nickname as user_nickname,
            (select count(*) from purchase_order_item poi where poi.purchase_order_id = po.id) as total_quantity,
            (select sum(price * quantity) from purchase_order_item poi where poi.purchase_order_id = po.id) as total_amount,
            po.remark,
            po.status,
            po.create_time
            from purchase_order as po
            left join supplier as s on po.supplier_id = s.id
            left join warehouse as w on po.warehouse_id = w.id
            left join system_users as su on po.staff_id = su.id
            WHERE po.deleted = 0
        <if test="req.orderNumber != null">
            AND po.order_number like concat('%', #{req.orderNumber}, '%')
        </if>
        <if test="req.warehouseId != null">
            AND po.warehouse_id = #{req.warehouseId}
        </if>
        <if test="req.supplierId != null">
            AND po.supplier_id = #{req.supplierId}
        </if>
        <if test="req.staffId != null">
            AND po.staff_id = #{req.staffId}
        </if>
        <if test="req.remark != null">
            AND po.remark like concat('%', #{req.remark}, '%')
        </if>
        <if test="req.status != null">
            AND po.status = #{req.status}
        </if>
        <if test="req.createTime != null">
            <if test="req.createTime.length == 2 and req.createTime[0] != null and req.createTime[1] != null">
                AND po.create_time BETWEEN #{req.createTime[0]} AND #{req.createTime[1]}
            </if>
            <if test="req.createTime.length == 1 and req.createTime[0] != null">
                AND po.create_time &gt;= #{req.createTime[0]}
            </if>
            <if test="req.createTime.length == 1 and req.createTime[1] != null">
                AND po.create_time &lt;= #{req.createTime[1]}
            </if>
        </if>
        order by po.id desc
    </select>

</mapper>