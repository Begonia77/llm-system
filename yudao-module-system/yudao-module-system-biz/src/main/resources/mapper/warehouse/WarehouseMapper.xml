<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.iocoder.yudao.module.system.dal.mysql.warehouse.WarehouseMapper">

    <!--
        一般情况下，尽可能使用 Mapper 进行 CRUD 增删改查即可。
        无法满足的场景，例如说多表关联查询，才使用 XML 编写 SQL。
        代码生成器暂时只生成 Mapper XML 文件本身，更多推荐 MybatisX 快速开发插件来生成查询。
        文档可见：https://www.iocoder.cn/MyBatis/x-plugins/
     -->
    <resultMap id="warehouseMap" type="cn.iocoder.yudao.module.system.dal.dataobject.warehouse.WarehouseDO">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="type" property="type" />
        <result column="address" property="address" />
        <result column="staff_id" property="staffId" />
        <result column="user_nickname" property="userNickname" />
        <result column="max_inventory" property="maxInventory" />
        <result column="remark" property="remark" />
        <result column="status" property="status" />
        <result column="inventory" property="inventory" />
        <result column="create_time" property="createTime" />
    </resultMap>

    <select id="selectWarehousePage" resultMap="warehouseMap">
        select
        w.id,
        w.name,
        w.type,
        w.address,
        w.staff_id,
        su.nickname as user_nickname,
        w.max_inventory,
        w.remark,
        w.status,
        COALESCE(po.purchase_quantity, 0) - COALESCE(so.sell_quantity, 0) as inventory,
        w.create_time
        from warehouse as w
        left join system_users as su on w.staff_id = su.id
        LEFT JOIN
            (SELECT purchase_order.warehouse_id, SUM(purchase_order_item.quantity) as purchase_quantity FROM purchase_order INNER JOIN purchase_order_item ON purchase_order.id = purchase_order_item.purchase_order_id WHERE purchase_order.deleted = 0 GROUP BY purchase_order.warehouse_id) po ON w.id = po.warehouse_id
        LEFT JOIN
            (SELECT sell_order.warehouse_id, SUM(sell_order_item.quantity) as sell_quantity FROM sell_order INNER JOIN sell_order_item ON sell_order.id = sell_order_item.sell_order_id WHERE sell_order.deleted = 0 GROUP BY sell_order.warehouse_id) so ON w.id = so.warehouse_id
        WHERE w.deleted = 0
        <if test="req.name != null">
            AND w.name like concat('%', #{req.name}, '%')
        </if>
        <if test="req.type != null">
            AND w.type = #{req.type}
        </if>
        <if test="req.staffId != null">
            AND w.staff_id = #{req.staffId}
        </if>
        <if test="req.status != null">
            AND w.status = #{req.status}
        </if>
        <if test="req.createTime != null">
            <if test="req.createTime.length == 2 and req.createTime[0] != null and req.createTime[1] != null">
                AND w.create_time BETWEEN #{req.createTime[0]} AND #{req.createTime[1]}
            </if>
            <if test="req.createTime.length == 1 and req.createTime[0] != null">
                AND w.create_time &gt;= #{req.createTime[0]}
            </if>
            <if test="req.createTime.length == 1 and req.createTime[1] != null">
                AND w.create_time &lt;= #{req.createTime[1]}
            </if>
        </if>
    </select>

    <select id="selectById" resultMap="warehouseMap">
        select
        w.id,
        w.name,
        w.type,
        w.address,
        w.staff_id,
        su.nickname as user_nickname,
        w.max_inventory,
        w.remark,
        w.status,
        COALESCE(po.purchase_quantity, 0) - COALESCE(so.sell_quantity, 0) as inventory,
        w.create_time
        from warehouse as w
        left join system_users as su on w.staff_id = su.id
        LEFT JOIN
            (SELECT purchase_order.warehouse_id, SUM(purchase_order_item.quantity) as purchase_quantity FROM purchase_order INNER JOIN purchase_order_item ON purchase_order.id = purchase_order_item.purchase_order_id WHERE purchase_order.deleted = 0 GROUP BY purchase_order.warehouse_id) po ON w.id = po.warehouse_id
        LEFT JOIN
            (SELECT sell_order.warehouse_id, SUM(sell_order_item.quantity) as sell_quantity FROM sell_order INNER JOIN sell_order_item ON sell_order.id = sell_order_item.sell_order_id WHERE sell_order.deleted = 0 GROUP BY sell_order.warehouse_id) so ON w.id = so.warehouse_id
        WHERE w.deleted = 0 and w.id = #{id}
    </select>
</mapper>